# -*- coding: utf-8 -*-
"""Shake Table Liquefaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gaoQ736bSZs3WupZvbXL9Mf0VsoRsZCr
"""

pip install matplotlib

import numpy as np
import matplotlib.pyplot as plt

def calculate_effective_stress(depth, density, acceleration, geogrid_layers):
    g = 9.81  # acceleration due to gravity (m/s^2)
    stress = density * g * depth
    effective_stress = stress - density * acceleration

    # Consider the geogrid layers
    for layer in geogrid_layers:
        layer_depth = depth - layer['top_depth']
        if layer_depth >= 0:
            geogrid_effective_stress = layer['stiffness'] * (layer_depth)

            # Consider the aperture opening in the geogrid
            if 'aperture_opening' in layer:
                geogrid_effective_stress *= np.exp(-layer['aperture_opening'] * layer_depth)

            effective_stress += geogrid_effective_stress

    return effective_stress

def calculate_excess_pore_pressure(depth, density, acceleration, void_ratio):
    # Simple empirical relationship for excess pore pressure
    alpha = 0.5  # Empirical constant
    effective_stress = calculate_effective_stress(depth, density, acceleration, [])
    excess_pore_pressure = alpha * void_ratio * effective_stress
    return excess_pore_pressure

def simulate_liquefaction_with_geogrid(density, frequency, input_acceleration, void_ratio,
                                       geogrid_layers, soil_sample_depth, shake_table_duration, dt):
    time = np.arange(0, shake_table_duration, dt)
    excess_pore_pressure = np.zeros_like(time)

    for i, t in enumerate(time):
        # Calculate depth relative to the top surface of the soil sample
        depth = soil_sample_depth - 10  # depth in meters (you may adjust this value)
        acceleration = np.sin(2 * np.pi * frequency * t) * input_acceleration  # Simple harmonic motion

        pore_pressure = calculate_excess_pore_pressure(depth, density, acceleration, void_ratio)
        excess_pore_pressure[i] = pore_pressure

    # Plot results
    print("soil_sample_depth:", soil_sample_depth, "shake_table_duration:", shake_table_duration, "dt:", dt)
    plt.figure(figsize=(10, 6))
    plt.plot(time, excess_pore_pressure, label='Excess Pore Pressure')
    plt.title('Excess Pore Pressure Simulation with Multiple Geogrid Layers')
    plt.xlabel('Time (seconds)')
    plt.ylabel('Excess Pore Pressure (Pa)')
    plt.legend()
    plt.show()

# Example parameters
density = 1800  # in kg/m^3
frequency = 4  # in Hz
input_acceleration = 0.1 * 9.8  # 0.1g in m/s^2
void_ratio = 0.5  # a typical value for illustration

# Example geogrid layers with aperture opening
geogrid_layers = [
    {'top_depth': 0, 'stiffness': 1000, 'aperture_opening': 0.001},
    {'top_depth': 5, 'stiffness': 800, 'aperture_opening': 0.002},
    {'top_depth': 10, 'stiffness': 1200, 'aperture_opening': 0.0015},
    {'top_depth': 15, 'stiffness': 900, 'aperture_opening': 0.001}
]
# enter values for first graph
soil_sample_depth1 = 0.6  # Depth of the soil sample in meters
shake_table_duration1 = 30  # in seconds
dt1 = 0.1  # time step for simulation

# enter values for second graph
soil_sample_depth2 = 0.6  # Depth of the soil sample in meters
shake_table_duration2 = 30  # in seconds
dt2 = 0.1  # time step for simulation

# enter values for third graph
soil_sample_depth3 = 0.6  # Depth of the soil sample in meters
shake_table_duration3 = 30  # in seconds
dt3 = 0.1  # time step for simulation


simulate_liquefaction_with_geogrid(density, frequency, input_acceleration, void_ratio,
                                   geogrid_layers, soil_sample_depth1, shake_table_duration1, dt1)

simulate_liquefaction_with_geogrid(density, frequency, input_acceleration, void_ratio,
                                   geogrid_layers, soil_sample_depth2, shake_table_duration2, dt2)

simulate_liquefaction_with_geogrid(density, frequency, input_acceleration, void_ratio,
                                   geogrid_layers, soil_sample_depth3, shake_table_duration3, dt3)